manifest {
    name = 'OrganelleFinder'
    author = ' Vendela Andersson, William Eulau, Viktor SÃ¤de'
    homePage = ''
    description = 'Nextflow genomic organelle finder pipeline'
    mainScript = 'OrganelleFinder.nf'
    nextflowVersion = '!>=20.01.0'
    version = '0.2'
}

params {
    // Input genome paths
    genome_assembly = ''
    reference_mitochondria = ''
    reference_chloroplast = ''
    reads_file = ''
    reads_exist = ''

    // Output directory
    outdir = ''
    input_type = ''

    mit_blast_evalue = ''
    mit_bitscore = ''
    mit_significant_gene_matches = ''
    mit_suspicious_gene_matches = ''
    mit_max_contig_length = ''
    mit_min_span_fraction = ''

    chl_blast_evalue = ''
    chl_bitscore = ''
    chl_significant_gene_matches = ''
    chl_suspicious_gene_matches = ''
    chl_max_contig_length = ''
    chl_min_span_fraction = ''
}
process {
    withName: 'FILTER' {
        publishDir = [
            [ 
                path: "${params.outdir}/statistics",
                mode: 'copy',
                pattern: { "${organelle}_statistics_summary.tsv" }
            ]
    }
    withName: 'STATISTICS' {
        publishDir = [
            [ 
                path: "${params.outdir}/statistics",
                mode: 'copy',
                pattern: { "${organelle}_organelle_matches_statistics.tsv" }
            ],
            [ 
                path: "${params.outdir}/statistics",
                mode: 'copy',
                pattern: { "${organelle}_suspicious_matches_statistics.tsv" }
            ]
        ]
    withName: 'PLOTING' {
        publishDir = [
            [ 
                path: "${params.outdir}/plots",
                mode: 'copy',
                pattern: { "*.png*" }
            ]
    }
    }
    withName: 'EXTRACT_MITOCHONDRIA' {
        publishDir = [
            [ 
                path: params.outdir,
                mode: 'copy',
                pattern: { "${assembly.baseName}_mitochondria.fna" }
            ]
    }
    withName: 'EXTRACT_FINAL' {
        publishDir = [
            [ 
                path: params.outdir,
                mode: 'copy',
                pattern: { "${assembly.baseName}_${organelle}.fna" }
            ],
            [
                path: params.outdir,
                mode: 'copy',
                pattern: { "${assembly.baseName}_nuclear.fna" }
            ]
        ]
    }
}

profiles {
    standard {
        process.executor = 'local'
    }

    singularity {
        singularity.enabled = true
    }

    debug { process.beforeScript = 'env' }

    docker {
        docker.enabled = true
        docker.runOptions='-u "$( id -u ):$( id -g )"'
    }
    uppmax {
        executor {
            name = 'slurm'
        }
        process {
            scratch = '$SNIC_TMP'
        }
        singularity.enabled = true
        singularity.envWhitelist = 'SNIC_TMP'
    }


}

resume = true

timeline {
    enabled = true
    file = "pipeline_report/execution_timeline.html"
}

report {
    enabled = true
    file = "pipeline_report/execution_report.html"
}

trace {
    enabled = true
    file = "pipeline_report/execution_trace.txt"
}

dag {
    enabled = true
    file = "pipeline_report/pipeline_dag.svg"
}
