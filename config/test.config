if ( params.subworkflow == 'abinitio_training' ) {
    params {
        maker_evidence_gff = 'https://github.com/nf-core/test-datasets/raw/rnaseq/reference/genes.gff'
        genome = 'https://github.com/nf-core/test-datasets/raw/rnaseq/reference/genome.fa'
        species_label = 'test_species'  // e.g. 'asecodes_parviclava'
        flank_region_size = 500
        locus_distance = [ 500 ]
    }
    process {
        // Trick: Fully qualified process name has higher priority than simple name
        // Otherwise settings are overridden by those in modules.config loaded after this
        withName: 'ABINITIO_TRAINING:GBK2AUGUSTUS' {
            ext.args   = '10'
        }
    }
}
if ( params.subworkflow == 'annotation_preprocessing' ) {
    params {
        genome = 'https://github.com/nf-core/test-datasets/raw/rnaseq/reference/genome.fa'
    }
}
if ( params.subworkflow == 'functional_annotation' ) {
    params {
        genome = 'https://github.com/nf-core/test-datasets/raw/rnaseq/reference/genome.fa'
        gff_annotation = 'https://github.com/nf-core/test-datasets/raw/rnaseq/reference/genes.gff'
        // blast_db_fasta = 'https://www.uniprot.org/uniprot/%3Fquery%3Dorganism%3A4932%26format%3Dfasta'
        blast_db_fasta = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/proteomics/database/yeast_UPS.fasta'
    }
    process {
        withName: 'FUNCTIONAL_ANNOTATION:INTERPROSCAN' {
            ext.args = [
                '-f TSV',
                // '--iprlookup',
                // '--goterms', 
                // '-pa', 
                // '-dp', 
                '-t p'
            ].join(' ').trim()
        }
    }
}
if ( params.subworkflow == 'transcript_assembly' ) {
    params {
        reads = 'https://github.com/nf-core/test-datasets/raw/rnaseq/testdata/SRR4238351_subsamp.fastq.gz'
        genome = 'https://github.com/nf-core/test-datasets/raw/rnaseq/reference/genome.fa'
        single_end = true
    }
}

// limit resources for test profile
process {

    cpus   = 1
    memory = 6.GB
    time   = 1.h

    withLabel: process_single {
        cpus   = 1
        memory = 6.GB
        time   = 1.h
    }
    withLabel: process_low {
        cpus   = 2
        memory = 6.GB
        time   = 1.h
    }
    withLabel: process_medium {
        cpus   = 2
        memory = 6.GB
        time   = 1.h
    }
    withLabel: process_high {
        cpus   = 2
        memory = 6.GB
        time   = 2.h
    }
    withLabel: process_long {
        time   = 1.h
    }
    withLabel: process_high_memory {
        memory = 6.GB
    }
}